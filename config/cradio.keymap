/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER 1
#define RAISE 2

&mt {
   //  flavor = "tap-preferred";
   tapping_term_ms = <200>;
};

/ {

  behaviors {
      td_mesc: tap_dance_mesc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MESC";
            #binding-cells = <0>;
            tapping-term-ms = <125>;
            bindings = <&kp M>, <&kp ESC>;};
    };

    keymap {
      compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp Q       &kp W      &kp F       &kp P       &kp B 						      &kp J          &kp L       &kp U       &kp Y      &kp SCLN
        &mt RMETA A &mt LALT R &mt LCTRL S &mt LSHFT T &kp G 			            &td_mesc       &mt LSHFT N &mt LCTRL E &mt LALT I &mt RMETA O
        &kp Z       &kp X      &kp C       &kp D       &kp V				          &kp K          &kp H       &kp CMMA    &kp DOT    &kp FSLH
                                           &kp RET     &lt LOWER SPACE  			&lt RAISE BSPC &kp TAB
      >;
		};

  lower_layer {
		bindings = <
      &kp GRAVE     &kp EXCL   &kp PRCNT   &kp DLLR    &kp AT		              &kp PIPE       &kp HASH    &kp ASTRK   &kp AMPS   &kp CARET
      &trans        &kp LBKT   &kp LPAR    &trans      &kp APOS 		          &kp DQT        &trans      &kp EQL     &kp MINUS  &kp BSLH
      &trans        &kp RBKT   &kp RPAR    &trans      &trans 	              &trans         &trans      &trans      &trans     &trans
                                           &trans      &trans  			          &kp BSPC       &trans
		>;
		};

	raise_layer {
		bindings = <
		&kp N1         &kp N2      &kp N3        &kp N4        &kp N5    			   &kp N6     &kp N7        &kp N8    &kp N9      &kp N0
		&trans         &kp K_MUTE  &kp C_VOL_UP  &kp C_VOL_DN  &kp C_PP 			   &kp LEFT   &kp DOWN      &kp UP    &kp RIGHT   &trans
		&kp LC(LA(F1)) &kp LC(LA(F2))  &kp LC(LA(F3)) &trans   &kp C_PREV    		 &kp C_NEXT &trans &trans &trans &trans
					                                        &trans   &kp SPACE  			 &trans  &trans
		>;
		};
	};
};
